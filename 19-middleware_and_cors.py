from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from time import time


# Create FastAPI instance
app = FastAPI()


'''
A "middleware" is a function that works with every request before it is processed by any specific
path operation. And also with every response before returning it.
- It takes each request that comes to your application.
- It can then do something to that request or run any needed code.
- Then it passes the request to be processed by the rest of the application (by some path operation).
- It then takes the response generated by the application (by some path operation).
- It can do something to that response or run any needed code.
- Then it returns the response.

The middleware function receives:
- The request.
- A function call_next that will receive the request as a parameter.
- This function will pass the request to the corresponding path operation.
- Then it returns the response generated by the corresponding path operation.
- You can then modify further the response before returning it.
'''

@app.middleware("http")
async def add_process_time_header(request: Request, call_next):
    start_time = time.time()
    response = await call_next(request)
    process_time = time.time() - start_time
    response.headers["X-Process-Time"] = str(process_time)
    return response


'''
CORS or "Cross-Origin Resource Sharing" refers to the situations when a frontend running in a browser
has JavaScript code that communicates with a backend, and the backend is in a different "origin" than
the frontend. An origin is the combination of protocol (http, https), domain (myapp.com, localhost,
localhost.tiangolo.com) and port (80, 443, 8080).

So, let's say you have a frontend running in your browser at http://localhost:8080, and its JavaScript
is trying to communicate with a backend running at http://localhost (the browser will assume the default
port 80). Then, the browser will send an HTTP OPTIONS request to the backend, and if the backend sends
the appropriate headers authorizing the communication from this different origin then the browser will
let the JavaScript in the frontend send its request to the backend. To achieve this, the backend must have
a list of "allowed origins". In this case, it would have to include http://localhost:8080 for the frontend
to work correctly.

It's also possible to declare the list as "*" (a "wildcard") to say that all are allowed. But that will only
allow certain types of communication, excluding everything that involves credentials: Cookies, Authorization
headers like those used with Bearer Tokens, etc. So, for everything to work correctly, it's better to specify
explicitly the allowed origins.

You can configure it in your FastAPI application using the CORSMiddleware.
- Import CORSMiddleware.
- Create a list of allowed origins (as strings).
- Add it as a "middleware" to your FastAPI application.
You can also specify if your backend allows:
- Credentials (Authorization headers, Cookies, etc).
- Specific HTTP methods (POST, PUT) or all of them with the wildcard "*".
- Specific HTTP headers or all of them with the wildcard "*".

The default parameters used by the CORSMiddleware implementation are restrictive by default, so you'll need to
explicitly enable particular origins, methods, or headers, in order for browsers to be permitted to use them in
a Cross-Domain context.
'''

origins = [
    "http://localhost.tiangolo.com",
    "https://localhost.tiangolo.com",
    "http://localhost",
    "http://localhost:8080",
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/")
async def main():
    return {"message": "Hello World"}
